<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <UsingTask
        TaskName="GetDotNetPackageFolder"
        TaskFactory="CodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
        <ParameterGroup>
            <PackageFolderPath ParameterType="Microsoft.Build.Framework.ITaskItem" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Using Namespace="Microsoft.Build.Utilities" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                try
                {
                    string runtimeRoot = ".dnx";
                    string userProfile = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
                    var packageFolder = Path.Combine(userProfile, ".dnx","packages");
                    PackageFolderPath = new TaskItem(packageFolder);
                }
                catch(Exception ex)
                {
                    Log.LogError("Error getting Package folder");
                    Log.LogErrorFromException(ex);
                }
                
                return !Log.HasLoggedErrors;
                ]]>
            </Code>
        </Task>
    </UsingTask>    


    <UsingTask
        TaskName="GetDependencyListForTemplates"
        TaskFactory="CodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
        <ParameterGroup>
            <DependencyList ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="True"/>
            <MergedDependencyList ParameterType="System.String" Required="True" />
            <TemplatePackagesList ParameterType="System.String" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Linq" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Using Namespace="Microsoft.Build.Utilities" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                try
                {   
                    List<string> packages = new List<string>();
                    List<string> templatePackages = new List<string>();
                    
                    if (!string.IsNullOrEmpty(TemplatePackagesList))
                    {
                        Log.LogMessage("Using TemplatePackagesList: {0}", TemplatePackagesList);
                        using (var packageReference = File.OpenText(TemplatePackagesList))
                        {
                            while (!packageReference.EndOfStream)
                            {
                                string line = packageReference.ReadLine();
                                string packageName = line.Substring(1);
                                if (line.StartsWith("+"))
                                {
                                    packages.Add(packageName);
                                }
                                else if (line.StartsWith("-"))
                                {
                                    templatePackages.Add(packageName);
                                }
                            }
                        }
                    }
                    
                    foreach(var list in DependencyList)
                    {
                        string fileName = list.ItemSpec;
                        Log.LogMessage("Opening {0}", fileName);

                        using (var file = File.OpenText(fileName))
                        {
                            while (!file.EndOfStream)
                            {
                                string line = file.ReadLine().Trim();
                                if (line.StartsWith("[") || line.StartsWith("->") || line.EndsWith(")"))
                                {
                                    continue;
                                }
                                
                                string[] parts = line.StartsWith("*") ? line.Substring(1).Trim().Split() : line.Trim().Split();
                                string packageName = parts[0].Trim();
                                
                                if (parts.Length == 2 && !templatePackages.Contains(packageName)
                                    && !packageName.StartsWith("framework/"))
                                {
                                    string packageVersion = parts[1].Trim();
                                    string packageToAdd = string.Format("{0}.{1}.nupkg", packageName, packageVersion);
                                    if (packageToAdd.StartsWith("*"))
                                    {
                                        packageToAdd = packageToAdd.Substring(1);
                                    }
                                    packages.Add(packageToAdd);
                                }
                            }
                        }
                    }

                    Log.LogMessage("Writing {0}", MergedDependencyList);

                    using (var outFile = System.IO.File.CreateText(MergedDependencyList))
                    {
                        foreach (var package in packages.Distinct())
                        {
                            outFile.WriteLine(package);
                        }
                        outFile.Flush();
                    }
                }
                catch(Exception ex)
                {
                    Log.LogError("Error Generating Dependency List");
                    Log.LogErrorFromException(ex);
                }
                
                return !Log.HasLoggedErrors;
                ]]>
            </Code>
        </Task>
    </UsingTask>    
    <UsingTask
        TaskName="VerifyWhitespace"
        TaskFactory="CodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
        <ParameterGroup>
            <FileList ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="True"/>
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Linq" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Using Namespace="Microsoft.Build.Utilities" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                try
                {   foreach(var taskItem in FileList)
                    {
                        using(var file = File.OpenText(taskItem.ItemSpec))
                        {
                            int lineNumber = 0;
                            string line = String.Empty;
                            while(!file.EndOfStream)
                            {
                                lineNumber++;
                                line = file.ReadLine();
                                if (!line.TrimEnd().Equals(line))
                                {
                                    Log.LogError("Trailing whitespace found in {0} line {1}, '{2}'", taskItem.ItemSpec, lineNumber, line);
                                }
                                if (line.Contains('\t'))
                                {
                                    Log.LogError("Embedded Tab found in {0} line {1}, '{2}'", taskItem.ItemSpec, lineNumber, line.Replace("\\t", "\\\\t"));
                                }
                            }
                            file.DiscardBufferedData();
                            file.BaseStream.Seek(-3, SeekOrigin.End);
                            if (file.Read() == 10 || file.Read() != 13 || file.Read() != 10)
                            {
                                Log.LogError("Last line in a file must be a non-blank line terminated with \\r\\n: {0} line {1}, '{2}'", taskItem.ItemSpec, lineNumber, line);
                            }
                        }
                    }
                }
                catch(Exception ex)
                {
                    Log.LogError("Error Verifying Whitespace");
                    Log.LogErrorFromException(ex);
                }
                return !Log.HasLoggedErrors;
                ]]>
            </Code>
        </Task>
    </UsingTask>
    <UsingTask
        TaskName="VerifyUsings"
        TaskFactory="CodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
        <ParameterGroup>
            <FileList ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="True"/>
            <RequiredUsings ParameterType="System.String" Required="True"/>
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Linq" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Using Namespace="Microsoft.Build.Utilities" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                try
                {   foreach(var taskItem in FileList)
                    {
                        String[] reqUsings = RequiredUsings.Split(';');
                    
                        bool[] hasUsing = new bool[reqUsings.Length];
                        using(var file = File.OpenText(taskItem.ItemSpec))
                        {
                            while(!file.EndOfStream)
                            {
                                string line = file.ReadLine();
                                if (line.Contains("{"))
                                {
                                    // continue to the first open brace, then go to the next file.
                                    break;
                                }
                                
                                for(int i=0; i < reqUsings.Length; i++)
                                {
                                    if (line.Contains(String.Format("using {0};", reqUsings[i])))
                                    {
                                        hasUsing[i] = true;
                                    }
                                }
                            }
                            for (int i=0; i < reqUsings.Length; i++)
                            {
                                if (!hasUsing[i]) 
                                {
                                    Log.LogError("File {0} is missing required using statement: {1}", taskItem.ItemSpec, reqUsings[i]);
                                }
                            } 
                        }
                    }
                }
                catch(Exception ex)
                {
                    Log.LogError("Error Verifying Using statements");
                    Log.LogErrorFromException(ex);
                }
                return !Log.HasLoggedErrors;
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>