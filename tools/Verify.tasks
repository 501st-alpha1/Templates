<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <UsingTask
        TaskName="GetDotNetFolder"
        TaskFactory="CodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
        <ParameterGroup>
            <DotNetPath ParameterType="Microsoft.Build.Framework.ITaskItem" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Using Namespace="Microsoft.Build.Utilities" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                try
                {
                    string dnxHome = Environment.GetEnvironmentVariable("DNX_HOME");
                    if (string.IsNullOrEmpty(dnxHome))
                    {
                        dnxHome = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), ".dnx");
                    }

                    string defaultAlias = Path.Combine(dnxHome, "alias", "default.txt");
                    if (!File.Exists(defaultAlias))
                    {
                        Log.LogError("Unable to locate default alias {0}.", defaultAlias);
                    }
                    else 
                    {
                        using (var file = File.OpenText(defaultAlias))
                        {
                            string runtime = file.ReadToEnd().Trim();
                            Log.LogMessage(@"Checking for runtime folder at {0}\runtimes\{1}\bin", dnxHome, runtime);
                            var runtimeBin = Path.Combine(dnxHome, "runtimes", runtime, "bin");
                            if (!Directory.Exists(runtimeBin))
                            {
                                Log.LogError("{0} was specified in {1}, but it was not installed.", runtimeBin, defaultAlias);
                            }
                            else
                            {
                                runtimeBin += @"\";
                                DotNetPath = new TaskItem(runtimeBin);
                            }
                        }
                    }
                }
                catch(Exception ex)
                {
                    Log.LogError("Error getting DotNet folder");
                    Log.LogErrorFromException(ex);
                }
                
                return !Log.HasLoggedErrors;
                ]]>
            </Code>
        </Task>
    </UsingTask>    

    <UsingTask
        TaskName="VerifyJsReferences"
        TaskFactory="CodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
        <ParameterGroup>
            <WwwRootPath ParameterType="System.String" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Text.RegularExpressions" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Using Namespace="Microsoft.Build.Utilities" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                try
                {
                    List<string> referencePaths = new List<string>();
                    string referencesFilename = Path.Combine(WwwRootPath, "_references.js");
                    if (File.Exists(referencesFilename))
                    {
                        using (var referencesFile = File.OpenText(referencesFilename))
                        {
                            string line = referencesFile.ReadToEnd();
                            foreach(Match match in Regex.Matches(line, "path=\"(.*)\""))
                            {
                                var referencePath = match.Groups[1].Value;
                                referencePaths.Add(referencePath);
                                // verify in this direction as we grab the captures.

                                if (!File.Exists(Path.Combine(WwwRootPath, referencePath)))
                                {
                                    Log.LogError("File specified in _references.js, but not found in project. '{0}'", referencePath);
                                }
                            }
                        }
                    }

                    // verify that the *.js files in the project root are in _references.js
                    DirectoryInfo rootFolder = new DirectoryInfo(Path.Combine(WwwRootPath, ".."));
                    foreach (var file in rootFolder.EnumerateFiles("*.js"))
                    {
                        string referencePath = Path.Combine("..", file.Name).Replace(Path.DirectorySeparatorChar, '/');
                        if (!referencePaths.Contains(referencePath))
                        {
                            Log.LogError("File found in project root, but not found in _references.js. '{0}'", referencePath);
                        }
                    }

                    // verify that the *.js files in the wwwroot folder are in _references.js
                    DirectoryInfo wwwFolder = new DirectoryInfo(WwwRootPath);
                    foreach (var file in wwwFolder.EnumerateFiles("*.js", SearchOption.AllDirectories))
                    {
                        string referencePath = file.FullName.Substring(wwwFolder.FullName.Length + 1).Replace(Path.DirectorySeparatorChar, '/');
                        if (!referencePaths.Contains(referencePath, StringComparer.OrdinalIgnoreCase) && !referencePath.Equals("_references.js", StringComparison.OrdinalIgnoreCase))
                        {
                            // ignore *.min.js
                            if (!referencePath.EndsWith(".min.js", StringComparison.OrdinalIgnoreCase))
                            {
                                Log.LogError("File found in wwwroot, but not found in _references.js. '{0}'", referencePath);
                            }
                        }
                    }
                }
                catch(Exception ex)
                {
                    Log.LogError("Error in VerifyJsReferences");
                    Log.LogErrorFromException(ex);
                }

                return !Log.HasLoggedErrors;
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>
